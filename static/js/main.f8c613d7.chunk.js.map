{"version":3,"sources":["components/Header/Header.tsx","mocks/fakeData.ts","components/Planner/TimeOfDayDisplay/TimeOfDayDisplay.tsx","components/Planner/SingleDay/SingleDay.tsx","components/Planner/WeekDisplay/WeekDisplay.tsx","components/Planner/MealPlanner.tsx","App.js","serviceWorker.js","index.js"],"names":["Header","React","react","className","Link","to","recipe","name","categories","ingredients","amount","unit","description","day","recipes","Map","fakeData","weeks","days","TimeOfDayDisplay","props","timeOfDay","recipeNames","map","join","getRecipes","SingleDay","ExpansionPanel_default","a","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","ExpansionPanelDetails_default","recipesMap","recipesNodes","forEach","node","TimeOfDayDisplay_TimeOfDayDisplay","key","push","WeekDisplay","week","i","SingleDay_SingleDay","concat","MealPlanner","WeekDisplay_WeekDisplay","length","App","react_default","createElement","Switch","Route","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0NAIaA,SAAkCC,OAAW,WAExD,OACEC,EAAA,qBAAKC,UAAU,UACbD,EAAA,cAACE,EAAA,EAAD,CAAMC,GAAG,IAAIF,UAAU,4BAAvB,oBCYAG,EAAiB,CACrBC,KAAM,WACNC,WAAY,CANa,CACzBD,KAAM,cAMNE,YAAa,CAbgB,CAC7BF,KAAM,SACNG,OAAQ,EACRC,KAAM,QAWNC,YAAa,sCAWTC,EAAW,CACfN,KAAM,cACNO,QAAS,IAAIC,IAAI,CAAC,CAVS,CAC3BR,KAAM,aASwB,CAACD,IAAU,CANb,CAC5BC,KAAM,UAKgD,CAACD,EAAQA,OAQpDU,EAAwB,CACnCC,MAAO,CANU,CACjBV,KAAM,aACNW,KAAM,CAACL,EAAKA,EAAKA,EAAKA,EAAKA,EAAKA,EAAKA,kFC3B1BM,SAAmD,SAAAC,GAC9D,OACElB,EAAA,qBAAKC,UAAU,aACbD,EAAA,sBAAMC,UAAU,mBAAmBiB,EAAMC,UAAUd,KAAnD,KARa,SAACO,GAClB,IAAMQ,EAAcR,EAAQS,IAAI,SAAAjB,GAAM,OAAIA,EAAOC,OACjD,OAAOL,EAAA,sBAAMC,UAAU,qBAAqBmB,EAAYE,KAAK,OAOxDC,CAAWL,EAAMN,YCKXY,EAA4C,SAAAN,GACvD,OACElB,EAAA,cAACyB,EAAAC,EAAD,KACE1B,EAAA,cAAC2B,EAAAD,EAAD,CAAuBE,WAAY5B,EAAA,cAAC6B,EAAAH,EAAD,OAChCR,EAAMP,IAAIN,MAEbL,EAAA,cAAC8B,EAAAJ,EAAD,KACE1B,EAAA,yBAlBW,SAAC+B,GAClB,IAAMC,EAAkC,GAOxC,OALAD,EAAWE,QAAQ,SAACrB,EAAmBO,GACrC,IAAMe,EAAOlC,EAAA,cAACmC,EAAD,CAAkBhB,UAAWA,EAAWP,QAASA,EAASwB,IAAKjB,EAAUd,OACtF2B,EAAaK,KAAKH,KAGbF,EAUKT,CAAWL,EAAMP,IAAIC,aCjBtB0B,EAA8C,SAAApB,GACzD,OACElB,EAAA,yBAASC,UAAU,QACjBD,EAAA,oBAAIC,UAAU,cAAciB,EAAMqB,KAAKlC,MAC9Ba,EAAMqB,KAAKvB,KAPZK,IAAI,SAACV,EAAK6B,GAAN,OAAYxC,EAAA,cAACyC,EAAD,CAAW9B,IAAKA,EAAKyB,IAAG,GAAAM,OAAK/B,EAAIN,KAAT,KAAAqC,OAAiBF,SCC1DG,EAAuC,WAClD,OACE3C,EAAA,6BACEA,EAAA,cAAC4C,EAAD,CAAaL,MATKxB,EASgBD,EAASC,MAR9BA,EAAMA,EAAM8B,OAAS,OADjB,IAAC9B,GCaT+B,mLAXX,OACEC,EAAArB,EAAAsB,cAAA,OAAK/C,UAAU,OACb8C,EAAArB,EAAAsB,cAAClD,EAAD,MACAiD,EAAArB,EAAAsB,cAACC,EAAA,EAAD,KACEF,EAAArB,EAAAsB,cAACE,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWV,aANzBW,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCTnCC,IAASC,OACPd,EAAArB,EAAAsB,cAACc,EAAA,EAAD,KACEf,EAAArB,EAAAsB,cAACe,EAAD,OAEFC,SAASC,eAAe,SDiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f8c613d7.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport './header.scss';\n\nexport const Header: React.FunctionComponent = React.memo(() => {\n  const testString = 'sdsd';\n  return (\n    <div className=\"header\">\n      <Link to=\"/\" className=\"header__btn btn--default\">\n        Meal planner\n      </Link>\n    </div>\n  );\n});\n","import {\n  Category,\n  Day,\n  Ingredient,\n  MealPlanner,\n  Recipe,\n  TimeOfDay,\n  Week\n} from '../interfaces/plannerModels';\n\nconst ingredient: Ingredient = {\n  name: 'Tomato',\n  amount: 2,\n  unit: 'pcs'\n};\n\nconst category: Category = {\n  name: 'breakfast'\n};\n\nconst recipe: Recipe = {\n  name: 'Sandwich',\n  categories: [category],\n  ingredients: [ingredient],\n  description: 'Chupa chups sugar plum cookie bear'\n};\n\nconst timeOfDay: TimeOfDay = {\n  name: 'Breakfast'\n};\n\nconst timeOfDay2: TimeOfDay = {\n  name: 'Dinner'\n};\n\nconst day: Day = {\n  name: 'Example day',\n  recipes: new Map([[timeOfDay, [recipe]], [timeOfDay2, [recipe, recipe]]])\n};\n\nconst week: Week = {\n  name: 'First week',\n  days: [day, day, day, day, day, day, day]\n};\n\nexport const fakeData: MealPlanner = {\n  weeks: [week]\n};\n","import * as React from 'react';\n\nimport './timeOfDayDisplay.scss';\nimport { TimeOfDay, Recipe } from '../../../interfaces/plannerModels';\n\ntype Props = {\n  timeOfDay: TimeOfDay;\n  recipes: Recipe[];\n};\n\nconst getRecipes = (recipes: Recipe[]) => {\n  const recipeNames = recipes.map(recipe => recipe.name);\n  return <span className=\"timeOfDay__recipe\">{recipeNames.join(', ')}</span>;\n};\n\nexport const TimeOfDayDisplay: React.FunctionComponent<Props> = props => {\n  return (\n    <div className=\"timeOfDay\">\n      <span className=\"timeOfDay__name\">{props.timeOfDay.name}:</span>\n      {getRecipes(props.recipes)}\n    </div>\n  );\n};\n","import * as React from 'react';\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { Day, Recipe, TimeOfDay } from '../../../interfaces/plannerModels';\nimport { TimeOfDayDisplay } from '../TimeOfDayDisplay/TimeOfDayDisplay';\n\ntype Props = {\n  day: Day;\n};\n\nconst getRecipes = (recipesMap: Map<TimeOfDay, Recipe[]>) => {\n  const recipesNodes: React.ReactNode[] = [];\n\n  recipesMap.forEach((recipes: Recipe[], timeOfDay: TimeOfDay) => {\n    const node = <TimeOfDayDisplay timeOfDay={timeOfDay} recipes={recipes} key={timeOfDay.name} />;\n    recipesNodes.push(node);\n  });\n\n  return recipesNodes;\n};\n\nexport const SingleDay: React.FunctionComponent<Props> = props => {\n  return (\n    <ExpansionPanel>\n      <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n        {props.day.name}\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails>\n        <div>{getRecipes(props.day.recipes)}</div>\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n  );\n};\n","import * as React from 'react';\n\nimport './weekDisplay.scss';\nimport { Day, Week } from '../../../interfaces/plannerModels';\nimport { SingleDay } from '../SingleDay/SingleDay';\n\ntype Props = {\n  week: Week;\n};\n\nconst getDays = (days: Day[]) => {\n  return days.map((day, i) => <SingleDay day={day} key={`${day.name}_${i}`} />);\n};\n\nexport const WeekDisplay: React.FunctionComponent<Props> = props => {\n  return (\n    <section className=\"week\">\n      <h3 className=\"week__name\">{props.week.name}</h3>\n      {getDays(props.week.days)}\n    </section>\n  );\n};\n","import * as React from 'react';\n\nimport { Week } from '../../interfaces/plannerModels';\nimport { fakeData } from '../../mocks/fakeData';\nimport { WeekDisplay } from './WeekDisplay/WeekDisplay';\n\nconst getCurrentWeek = (weeks: Week[]) => {\n  const lastWeek = weeks[weeks.length - 1];\n\n  return lastWeek;\n};\n\nexport const MealPlanner: React.FunctionComponent = () => {\n  return (\n    <section>\n      <WeekDisplay week={getCurrentWeek(fakeData.weeks)} />\n    </section>\n  );\n};\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport { Header } from './components/Header/Header.tsx';\nimport { MealPlanner } from './components/Planner/MealPlanner';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <Header />\n        <Switch>\n          <Route exact path=\"/\" component={MealPlanner} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}